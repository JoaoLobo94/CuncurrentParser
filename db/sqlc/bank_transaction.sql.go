// Code generated by sqlc. DO NOT EDIT.
// source: bank_transaction.sql

package db

import (
	"context"
	"database/sql"
)

const createBank_Transaction = `-- name: CreateBank_Transaction :one
INSERT INTO bank_transactions (
  amount, user_id
) VALUES (
  $1, $2
)
RETURNING id, amount, user_id, created_at
`

type CreateBank_TransactionParams struct {
	Amount sql.NullFloat64
	UserID sql.NullInt32
}

func (q *Queries) CreateBank_Transaction(ctx context.Context, arg CreateBank_TransactionParams) (BankTransaction, error) {
	row := q.db.QueryRowContext(ctx, createBank_Transaction, arg.Amount, arg.UserID)
	var i BankTransaction
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const getBank_Transaction = `-- name: GetBank_Transaction :one
SELECT id, amount, user_id, created_at FROM bank_transactions
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetBank_Transaction(ctx context.Context, id int32) (BankTransaction, error) {
	row := q.db.QueryRowContext(ctx, getBank_Transaction, id)
	var i BankTransaction
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const listBank_Transactions = `-- name: ListBank_Transactions :many
SELECT id, amount, user_id, created_at FROM bank_transactions
ORDER BY id
`

func (q *Queries) ListBank_Transactions(ctx context.Context) ([]BankTransaction, error) {
	rows, err := q.db.QueryContext(ctx, listBank_Transactions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BankTransaction
	for rows.Next() {
		var i BankTransaction
		if err := rows.Scan(
			&i.ID,
			&i.Amount,
			&i.UserID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
